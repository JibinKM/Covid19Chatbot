from tkinter import *
import requests
import json
import pyttsx3
import speech_recognition as sr
import re
import threading
import time
from PIL import ImageTk,Image


API_KEY = " " # api key from Parsehub
PROJECT_TOKEN = " " # project token from Parsehub
RUN_TOKEN = " " # run token from Parsehub

Query: str = ""
Reply: str = ""
Country: str = ""
Context: str = ""


class Data:
    def __init__(self, api_key, project_token):
        self.api_key = api_key
        self.project_token = project_token
        self.params = {
            "api_key": self.api_key
        }
        self.data = self.get_data()

    def get_data(self):
        response = requests.get(f'https://www.parsehub.com/api/v2/projects/{self.project_token}/last_ready_run/data',
                                params=self.params)
        data = json.loads(response.text)
        return data

    def get_total_cases(self):
        data = self.data['total']

        for content in data:
            if content['name'] == "Coronavirus Cases:":
                return content['value']

    def get_total_deaths(self):
        data = self.data['total']
        for content in data:
            if content['name'] == "Deaths:":
                return content['value']

        return "0"

    def get_country_data(self, country):
        data = self.data["country"]

        for content in data:
            if content['name'].lower() == country.lower():
                return content

        return "0"

    @property
    def get_list_of_countries(self):
        countries = []
        for country in self.data['country']:
            countries.append(country['name'].lower())

        return countries

    def update_data(self):
        response = requests.post(f'https://www.parsehub.com/api/v2/projects/{self.project_token}/run' ,
                                 params=self.params)

        def poll():
            time.sleep(0.1)
            old_data = self.data
            while True:
                new_data = self.get_data()
                if new_data != old_data:
                    self.data = new_data
                    print("Data updated")
                    break
                time.sleep(5)

        t = threading.Thread(target=poll)
        t.start()


def speak(text):
    engine = pyttsx3.init()
    engine.say(text)
    engine.runAndWait()


def get_audio():
    r = sr.Recognizer()
    print("Listening...")
    with sr.Microphone() as source:
        audio = r.listen(source)
        said = ""

        try:
            said = r.recognize_google(audio)
            print(said)
        except Exception as e:
            global Reply
            #Reply = "I do not understand" + str(e)
            #global Country
            #Country = "none"
    return said.lower()


def main():
    print("Started Program")
    global Country
    data = Data(API_KEY, PROJECT_TOKEN)
    END_PHRASE = "stop"
    country_list = data.get_list_of_countries

    TOTAL_PATTERNS = {
        re.compile("[\w\s]+ total [\w\s]+ cases"): data.get_total_cases ,
        re.compile("[\w\s]+ total cases"): data.get_total_cases ,
        re.compile("[\w\s]+ total [\w\s]+ deaths"): data.get_total_deaths ,
        re.compile("[\w\s]+ total deaths"): data.get_total_deaths
    }

    COUNTRY_PATTERNS = {
        re.compile("[\w\s]+ cases [\w\s]+"): lambda country: data.get_country_data(country)['total_cases'],
        re.compile("[\w\s]+ deaths [\w\s]+"): lambda country: data.get_country_data(country)['total_deaths'],
        re.compile("[\w\s]+ recovered [\w\s]+"): lambda country: data.get_country_data(country)['total_recovered'],
        re.compile("[\w\s]+ active [\w\s]+"): lambda country: data.get_country_data(country)['active_cases'],
        re.compile("[\w\s]+ critical [\w\s]+"): lambda country: data.get_country_data(country)['serious_critical'],
        re.compile("[\w\s]+ population [\w\s]+"): lambda country: data.get_country_data(country)['total_population'],
        re.compile("[\w\s]+ tests [\w\s]+"): lambda country: data.get_country_data(country)['total_tests']

    }

    UPDATE_COMMAND = "update"
    text = Query.lower()
    print(text)
    result = None
    for pattern , func in COUNTRY_PATTERNS.items():
        if pattern.match(text):
            words = set(text.split(" "))
            for country in country_list:
                if country in words:
                    result = func(country)
                    global Country
                    Country = country
                    break

    for pattern , func in TOTAL_PATTERNS.items():
        if pattern.match(text):
            result = func()
            break

    if text == UPDATE_COMMAND:
        result = "Data is being updated. This may take a moment!"
        data.update_data()

    if result:
        global Reply
        global Contry
        if Country == "none":
            Reply = result
        else:
            Reply = "Number of " + Context + " in " + Country + " is " + result
        speak(Reply)
    # if text.find(END_PHRASE) != -1:  # stop loop
    #     textarea.insert('Bot:Let there be darkness')
    #     speak('let there be darkness')
    #     root.quit()


def ask_clicked():
    global Query
    global Context
    Query = questionfield.get()
    textarea.insert(END , "You:" + Query + "\n\n")
    if re.search("cases",Query.lower(),re.IGNORECASE):
        Context ="cases"
    if re.search("deaths",Query.lower(),re.IGNORECASE):
        Context = "deaths"
    if re.search("population",Query.lower(),re.IGNORECASE):
        Context = "people"
    if re.search("tests",Query.lower(),re.IGNORECASE):
        Context = "tests"
    if re.search("recovered",Query.lower(),re.IGNORECASE):
        Context = "recovered cases"
    if re.search("critical",Query.lower(),re.IGNORECASE):
        Context = "critical cases"
    if re.search("recovered",Query.lower(),re.IGNORECASE):
        Context = "recovered cases"
    if re.search("active",Query.lower(),re.IGNORECASE):
        Context = "active cases"
    main()
    textarea.configure(state="normal")
    textarea.insert(END , "Bot:" + Reply + "\n\n")
    questionfield.delete(0 , END)
    textarea.yview(END)
    textarea.configure(state="disabled")

def mic_clicked():
    global Query
    Query = get_audio()
    textarea.insert(END , "You:" + Query + "\n\n")
    main()
    textarea.insert(END , "Bot:" + Reply + "\n\n")
    questionfield.delete(0 , END)
    textarea.yview(END)


# gui
root = Tk()
root.geometry('500x570+100+30')
root.resizable(0, 0)
root.title("Covid 19 chat bot")
root.config(bg='gray20')
pict = Image.open('ask_new.png')
pic_1t=Image.open('mic_new.png')
pic_2t=Image.open('logo_for.png')
pic = ImageTk.PhotoImage(pict)
pic_1=ImageTk.PhotoImage(pic_1t)
pic_2=ImageTk.PhotoImage(pic_2t)
#picture_label = Label(root, image=pic, bg='grey20')
picture_label_2 = Label(root, image=pic_2, bg='grey20')
#picture_label.pack(side=LEFT, pady=2)
picture_label_2.pack(side=TOP, pady=2)


center_frame = Frame(root)
center_frame.pack()
sc_bar = Scrollbar(center_frame,bg='grey20')
sc_bar.pack(side=RIGHT, fill=Y)
textarea = Text(center_frame, width=80, height=10, yscrollcommand=sc_bar.set,
                bg='gray20',fg='gray90')
textarea.pack(side=LEFT, fill=BOTH)
questionfield = Entry(root, bg='grey20',fg='grey90')
questionfield.pack(fill=X, pady=15)
#askphoto = PhotoImage(file='ask.png')
askbutton = Button(root, image=pic, cursor='hand2',bg='grey20', command = ask_clicked)
askbutton.pack(side =LEFT, expand=True)
mic = Button(root , image=pic_1, cursor='hand2', bg='grey20',command=mic_clicked)
mic.pack(side =LEFT, expand=True)
# update_button = Button(root , text="Update")
# update_button.pack()

def enter_function(event):
    askbutton.invoke()


root.bind('<Return>', enter_function)
root.mainloop()

def enter_function(event):
    askbutton.invoke()


root.bind('<Return>', enter_function)
root.mainloop()
